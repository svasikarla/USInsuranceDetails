import * as _supabase_supabase_js from '@supabase/supabase-js';
export { Session, SupabaseClient, User } from '@supabase/supabase-js';
import * as _supabase_supabase_js_dist_module_lib_types from '@supabase/supabase-js/dist/module/lib/types';
import { SupabaseClientOptionsWithoutAuth, CookieOptions } from '@supabase/auth-helpers-shared';
import { GetServerSidePropsContext, NextApiRequest, NextApiResponse } from 'next';
import { NextRequest, NextResponse } from 'next/server';

declare function createBrowserSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>({ supabaseUrl, supabaseKey, options, cookieOptions }?: {
    supabaseUrl?: string;
    supabaseKey?: string;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare function createServerSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>(context: GetServerSidePropsContext | {
    req: NextApiRequest;
    res: NextApiResponse;
}, { supabaseUrl, supabaseKey, options, cookieOptions }?: {
    supabaseUrl?: string;
    supabaseKey?: string;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare function createMiddlewareSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>(context: {
    req: NextRequest;
    res: NextResponse;
}, { supabaseUrl, supabaseKey, options, cookieOptions }?: {
    supabaseUrl?: string;
    supabaseKey?: string;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare function createServerComponentSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>({ supabaseUrl, supabaseKey, headers, cookies, options, cookieOptions }: {
    supabaseUrl?: string;
    supabaseKey?: string;
    headers: () => any;
    cookies: () => any;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare const createRouteHandlerSupabaseClient: typeof createServerComponentSupabaseClient;

export { createBrowserSupabaseClient, createMiddlewareSupabaseClient, createRouteHandlerSupabaseClient, createServerComponentSupabaseClient, createServerSupabaseClient };
