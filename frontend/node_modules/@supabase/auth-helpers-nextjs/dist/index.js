"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createBrowserSupabaseClient: () => createBrowserSupabaseClient,
  createMiddlewareSupabaseClient: () => createMiddlewareSupabaseClient,
  createRouteHandlerSupabaseClient: () => createRouteHandlerSupabaseClient,
  createServerComponentSupabaseClient: () => createServerComponentSupabaseClient,
  createServerSupabaseClient: () => createServerSupabaseClient
});
module.exports = __toCommonJS(src_exports);
var import_auth_helpers_shared = require("@supabase/auth-helpers-shared");
function createBrowserSupabaseClient({
  supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  options,
  cookieOptions
} = {}) {
  var _a;
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!"
    );
  }
  return (0, import_auth_helpers_shared.createBrowserSupabaseClient)({
    supabaseUrl,
    supabaseKey,
    options: {
      ...options,
      global: {
        ...options == null ? void 0 : options.global,
        headers: {
          ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
          "X-Client-Info": `${"@supabase/auth-helpers-nextjs"}@${"0.6.1"}`
        }
      }
    },
    cookieOptions
  });
}
function createServerSupabaseClient(context, {
  supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  options,
  cookieOptions
} = {}) {
  var _a;
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!"
    );
  }
  return (0, import_auth_helpers_shared.createServerSupabaseClient)({
    supabaseUrl,
    supabaseKey,
    getRequestHeader: (key) => context.req.headers[key],
    getCookie(name) {
      return context.req.cookies[name];
    },
    setCookie(name, value, options2) {
      var _a2;
      const newSetCookies = (0, import_auth_helpers_shared.filterCookies)(
        (0, import_auth_helpers_shared.ensureArray)(((_a2 = context.res.getHeader("set-cookie")) == null ? void 0 : _a2.toString()) ?? []),
        name
      );
      const newSessionStr = (0, import_auth_helpers_shared.serializeCookie)(name, value, {
        ...options2,
        httpOnly: false
      });
      context.res.setHeader("set-cookie", [...newSetCookies, newSessionStr]);
    },
    options: {
      ...options,
      global: {
        ...options == null ? void 0 : options.global,
        headers: {
          ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
          "X-Client-Info": `${"@supabase/auth-helpers-nextjs"}@${"0.6.1"}`
        }
      }
    },
    cookieOptions
  });
}
function createMiddlewareSupabaseClient(context, {
  supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  options,
  cookieOptions
} = {}) {
  var _a;
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!"
    );
  }
  return (0, import_auth_helpers_shared.createServerSupabaseClient)({
    supabaseUrl,
    supabaseKey,
    getCookie(name) {
      const cookies = (0, import_auth_helpers_shared.parseCookies)(context.req.headers.get("cookie") ?? "");
      return cookies[name];
    },
    setCookie(name, value, options2) {
      const newSessionStr = (0, import_auth_helpers_shared.serializeCookie)(name, value, {
        ...options2,
        httpOnly: false
      });
      context.req.headers.append("cookie", newSessionStr);
      context.res.headers.set("set-cookie", newSessionStr);
    },
    getRequestHeader: (key) => {
      const header = context.req.headers.get(key) ?? void 0;
      return header;
    },
    options: {
      ...options,
      global: {
        ...options == null ? void 0 : options.global,
        headers: {
          ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
          "X-Client-Info": `${"@supabase/auth-helpers-nextjs"}@${"0.6.1"}`
        }
      }
    },
    cookieOptions
  });
}
function createServerComponentSupabaseClient({
  supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  headers,
  cookies,
  options,
  cookieOptions
}) {
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!"
    );
  }
  return (0, import_auth_helpers_shared.createServerSupabaseClient)({
    supabaseUrl,
    supabaseKey,
    getRequestHeader: (key) => {
      const headerList = headers();
      return headerList.get(key);
    },
    getCookie(name) {
      var _a;
      const nextCookies = cookies();
      return (_a = nextCookies.get(name)) == null ? void 0 : _a.value;
    },
    setCookie() {
    },
    options: {
      ...options,
      global: {
        ...options == null ? void 0 : options.global,
        headers: {
          "X-Client-Info": `${"@supabase/auth-helpers-nextjs"}@${"0.6.1"}`
        }
      }
    },
    cookieOptions
  });
}
var createRouteHandlerSupabaseClient = createServerComponentSupabaseClient;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createBrowserSupabaseClient,
  createMiddlewareSupabaseClient,
  createRouteHandlerSupabaseClient,
  createServerComponentSupabaseClient,
  createServerSupabaseClient
});
//# sourceMappingURL=index.js.map