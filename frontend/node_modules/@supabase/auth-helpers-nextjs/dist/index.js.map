{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  CookieOptions,\n  createBrowserSupabaseClient as _createBrowserSupabaseClient,\n  createServerSupabaseClient as _createServerSupabaseClient,\n  ensureArray,\n  filterCookies,\n  serializeCookie,\n  parseCookies,\n  SupabaseClientOptionsWithoutAuth\n} from '@supabase/auth-helpers-shared';\nimport {\n  GetServerSidePropsContext,\n  NextApiRequest,\n  NextApiResponse\n} from 'next';\nimport { NextRequest, NextResponse } from 'next/server';\n\n// Types\nexport type { Session, User, SupabaseClient } from '@supabase/supabase-js';\n\n// Methods\nexport function createBrowserSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,\n  supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  options,\n  cookieOptions\n}: {\n  supabaseUrl?: string;\n  supabaseKey?: string;\n  options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n  cookieOptions?: CookieOptions;\n} = {}) {\n  if (!supabaseUrl || !supabaseKey) {\n    throw new Error(\n      'either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!'\n    );\n  }\n\n  return _createBrowserSupabaseClient<Database, SchemaName>({\n    supabaseUrl,\n    supabaseKey,\n    options: {\n      ...options,\n      global: {\n        ...options?.global,\n        headers: {\n          ...options?.global?.headers,\n          'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n        }\n      }\n    },\n    cookieOptions\n  });\n}\n\nexport function createServerSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>(\n  context:\n    | GetServerSidePropsContext\n    | { req: NextApiRequest; res: NextApiResponse },\n  {\n    supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,\n    supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    options,\n    cookieOptions\n  }: {\n    supabaseUrl?: string;\n    supabaseKey?: string;\n    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n    cookieOptions?: CookieOptions;\n  } = {}\n) {\n  if (!supabaseUrl || !supabaseKey) {\n    throw new Error(\n      'either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!'\n    );\n  }\n\n  return _createServerSupabaseClient<Database, SchemaName>({\n    supabaseUrl,\n    supabaseKey,\n    getRequestHeader: (key) => context.req.headers[key],\n\n    getCookie(name) {\n      return context.req.cookies[name];\n    },\n    setCookie(name, value, options) {\n      const newSetCookies = filterCookies(\n        ensureArray(context.res.getHeader('set-cookie')?.toString() ?? []),\n        name\n      );\n      const newSessionStr = serializeCookie(name, value, {\n        ...options,\n        // Allow supabase-js on the client to read the cookie as well\n        httpOnly: false\n      });\n\n      context.res.setHeader('set-cookie', [...newSetCookies, newSessionStr]);\n    },\n    options: {\n      ...options,\n      global: {\n        ...options?.global,\n        headers: {\n          ...options?.global?.headers,\n          'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n        }\n      }\n    },\n    cookieOptions\n  });\n}\n\nexport function createMiddlewareSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>(\n  context: { req: NextRequest; res: NextResponse },\n  {\n    supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,\n    supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    options,\n    cookieOptions\n  }: {\n    supabaseUrl?: string;\n    supabaseKey?: string;\n    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n    cookieOptions?: CookieOptions;\n  } = {}\n) {\n  if (!supabaseUrl || !supabaseKey) {\n    throw new Error(\n      'either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!'\n    );\n  }\n\n  return _createServerSupabaseClient<Database, SchemaName>({\n    supabaseUrl,\n    supabaseKey,\n    getCookie(name) {\n      const cookies = parseCookies(context.req.headers.get('cookie') ?? '');\n      return cookies[name];\n    },\n    setCookie(name, value, options) {\n      const newSessionStr = serializeCookie(name, value, {\n        ...options,\n        // Allow supabase-js on the client to read the cookie as well\n        httpOnly: false\n      });\n\n      context.req.headers.append('cookie', newSessionStr);\n      context.res.headers.set('set-cookie', newSessionStr);\n    },\n    getRequestHeader: (key) => {\n      const header = context.req.headers.get(key) ?? undefined;\n      return header;\n    },\n    options: {\n      ...options,\n      global: {\n        ...options?.global,\n        headers: {\n          ...options?.global?.headers,\n          'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n        }\n      }\n    },\n    cookieOptions\n  });\n}\n\nexport function createServerComponentSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL,\n  supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  headers,\n  cookies,\n  options,\n  cookieOptions\n}: {\n  supabaseUrl?: string;\n  supabaseKey?: string;\n  headers: () => any; // TODO update this to be ReadonlyRequestCookies when we upgrade to Next.js 13\n  cookies: () => any; // TODO update this to be ReadonlyHeaders when we upgrade to Next.js 13\n  options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n  cookieOptions?: CookieOptions;\n}) {\n  if (!supabaseUrl || !supabaseKey) {\n    throw new Error(\n      'either NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables or supabaseUrl and supabaseKey are required!'\n    );\n  }\n\n  return _createServerSupabaseClient<Database, SchemaName>({\n    supabaseUrl,\n    supabaseKey,\n    getRequestHeader: (key) => {\n      const headerList = headers();\n      return headerList.get(key);\n    },\n    getCookie(name) {\n      const nextCookies = cookies();\n      return nextCookies.get(name)?.value;\n    },\n    setCookie() {\n      // Note: The Next.js team at Vercel is working on adding the ability to\n      // set cookies in addition to the cookies function.\n      // https://beta.nextjs.org/docs/api-reference/cookies\n    },\n    options: {\n      ...options,\n      global: {\n        ...options?.global,\n        headers: {\n          'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n        }\n      }\n    },\n    cookieOptions\n  });\n}\n\nexport const createRouteHandlerSupabaseClient =\n  createServerComponentSupabaseClient;\n"],"mappings":"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","names":["_createBrowserSupabaseClient","_createServerSupabaseClient","options","_a"]}